# 配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。 
druid.name=druidDataSource
# 连接数据库的url
druid.url=jdbc:mysql://localhost:3306/activiti2?useUnicode=true&characterEncoding=utf8&autoReconnect=true
# 连接数据的驱动
druid.driverClassName=com.mysql.jdbc.Driver  
# 连接数据库的用户名
druid.username=root
# 连接数据库的密码
druid.password=hnyszt2016
# 属性类型是字符串,通过别名的方式配置扩展插件 常用的插件有： 
# 监控统计用的filter: stat日志用的filter:log4j防御sql注入的filter:wall
druid.filters=stat
# 最大连接池数量
druid.maxActive=20
# 初始化时建立物理连接的个数，初始化发生在显示调用方法，获得getconnection时
druid.initialSize=1
# 获取连接时最大等待时间，单位为毫秒
# 配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
druid.maxWait=60000
# 最小连接池数量
druid.minIdle=10
# 已经不在使用，配置了也没效果
maxIdle:100  
# Destroy线程会检测连接的间隔时间2) testWhileIdle的判断依据
druid.timeBetweenEvictionRunsMillis=60000
# 
druid.minEvictableIdleTimeMillis=300000
# 用来检测是否有效的sql
druid.validationQuery=SELECT 'x'
# 建议配置为true,不影响性能，并确保证安全性
# 。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
druid.testWhileIdle=true
# 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
druid.testOnBorrow=false
# 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能#
druid.testOnReturn=false
# 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
#poolPreparedStatements:true  
druid.maxOpenPreparedStatements=20
# 
druid.removeAbandoned:true
#
druid.removeAbandonedTimeout:1800
#
druid.logAbandoned:true